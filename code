#include <MCUFRIEND_kbv.h>
#include <Adafruit_GFX.h>
#include <EEPROM.h>

MCUFRIEND_kbv tft;

// Pin definitions for analog inputs
#define MAP_PIN   A0
#define IAT_PIN   A1
#define OIL_PIN   A2
#define FUEL_PIN  A3

// Digital pins
#define VSS_PIN   2     // interrupt pin for speed sensor
#define BTN_PIN   4     // trip reset button
#define LED_PIN   7     // startup LED

// Calibration values
#define OIL_ZERO_ADC 102
#define OIL_FULL_ADC 921
#define MAP_ZERO_ADC 102
#define MAP_FULL_ADC 921
#define MAP_MIN_KPA 50.0
#define MAP_MAX_KPA 400.0
#define OIL_MAX_PSI 100.0
float ambient_kPa = 101.0;

int fuelEmptyADC = 614;
int fuelFullADC  = 82;

const float R_PULL = 10000.0;
const double A_coef = 0.00129, B_coef = 0.000266, C_coef = 0.000000122;

volatile unsigned long pulseCount = 0;
unsigned long tripPulseCount = 0;
unsigned long lastSpeedMillis = 0;
unsigned long lastSavedPulseCount = 0;
const int EEPROM_ADDR = 0;
const unsigned long speedInterval = 500;

bool lastButtonState = HIGH;
unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 50;
unsigned long startTime;

void onVSSPulse() {
  pulseCount++;
  tripPulseCount++;
}

void setup() {
  Serial.begin(9600);

  pinMode(VSS_PIN, INPUT_PULLUP);
  pinMode(BTN_PIN, INPUT_PULLUP);
  pinMode(LED_PIN, OUTPUT);

  attachInterrupt(digitalPinToInterrupt(VSS_PIN), onVSSPulse, FALLING);

  EEPROM.get(EEPROM_ADDR, tripPulseCount);
  lastSavedPulseCount = tripPulseCount;

  digitalWrite(LED_PIN, HIGH);
  startTime = millis();

  uint16_t ID = tft.readID();
  tft.begin(ID);
  tft.setRotation(1);
  tft.fillScreen(BLACK);
  tft.setTextColor(WHITE, BLACK);
  tft.setTextSize(2);

  // Read ambient pressure at startup
  int raw = analogRead(MAP_PIN);
  float pressure_kPa = (raw - MAP_ZERO_ADC) * (MAP_MAX_KPA - MAP_MIN_KPA) / (MAP_FULL_ADC - MAP_ZERO_ADC) + MAP_MIN_KPA;
  if (pressure_kPa > 80 && pressure_kPa < 120) ambient_kPa = pressure_kPa;
}

void loop() {
  unsigned long now = millis();
  if (now - startTime >= 4000) digitalWrite(LED_PIN, LOW);

  if (now - lastSpeedMillis >= speedInterval) {
    noInterrupts();
    unsigned long pulses = pulseCount;
    pulseCount = 0;
    interrupts();
    lastSpeedMillis = now;

    float mph = pulses * (1000.0 / speedInterval) * 0.45;

    // Oil PSI
    int rawOil = analogRead(OIL_PIN);
    float oilPsi = (rawOil - OIL_ZERO_ADC) * (OIL_MAX_PSI / (OIL_FULL_ADC - OIL_ZERO_ADC));
    if (oilPsi < 0) oilPsi = 0;

    // Fuel %
    int rawFuel = analogRead(FUEL_PIN);
    int fuelPercent = map(rawFuel, fuelFullADC, fuelEmptyADC, 100, 0);
    fuelPercent = constrain(fuelPercent, 0, 100);

    // MAP/Boost
    int rawMAP = analogRead(MAP_PIN);
    float pressure_kPa = (rawMAP - MAP_ZERO_ADC) * (MAP_MAX_KPA - MAP_MIN_KPA) / (MAP_FULL_ADC - MAP_ZERO_ADC) + MAP_MIN_KPA;
    float boost_kPa = pressure_kPa - ambient_kPa;
    if (boost_kPa < 0) boost_kPa = 0;
    float boostPsi = boost_kPa / 6.89476;

    // IAT Temp
    int rawIAT = analogRead(IAT_PIN);
    float Vout = rawIAT * (5.0 / 1023.0);
    float Rth = R_PULL * (Vout / (5.0 - Vout));
    double lnR = log(Rth);
    double invT = A_coef + B_coef * lnR + C_coef * pow(lnR, 3);
    double tempK = 1.0 / invT;
    double tempF = (tempK - 273.15) * 9.0 / 5.0 + 32.0;

    float tripMiles = tripPulseCount / 8000.0;

    // Display update
    tft.setCursor(10, 10);
    tft.printf("SPD: %3d MPH", (int)round(mph));
    tft.setCursor(10, 40);
    tft.printf("BST: %.1f PSI", boostPsi);
    tft.setCursor(10, 70);
    tft.printf("IAT: %3d F", (int)round(tempF));
    tft.setCursor(10, 100);
    tft.printf("OIL: %3d PSI", (int)round(oilPsi));
    tft.setCursor(10, 130);
    tft.printf("FUEL: %3d%%", fuelPercent);
    tft.setCursor(10, 160);
    tft.printf("TRIP: %.1f mi", tripMiles);

    // EEPROM save
    if (tripPulseCount >= lastSavedPulseCount + 800) {
      EEPROM.put(EEPROM_ADDR, tripPulseCount);
      lastSavedPulseCount = tripPulseCount;
    }
  }

  // Button debounce
  int reading = digitalRead(BTN_PIN);
  if (reading != lastButtonState) {
    lastDebounceTime = millis();
    lastButtonState = reading;
  }
  if ((millis() - lastDebounceTime) > debounceDelay && lastButtonState == LOW) {
    tripPulseCount = 0;
    EEPROM.put(EEPROM_ADDR, 0);
    lastSavedPulseCount = 0;
  }
}
